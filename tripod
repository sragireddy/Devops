import csv

def sum_and_count_rows(input_csv_file, output_csv_file):
    try:
        with open(input_csv_file, 'r', newline='') as input_file, \
             open(output_csv_file, 'w', newline='') as output_file:
            reader = csv.DictReader(input_file)
            
            # Check if 'BAL_DIFF' column exists
            header = reader.fieldnames
            if "BAL_DIFF" not in header:
                print("Error: 'BAL_DIFF' column not found in the CSV.")
                return
            
            # Prepare output CSV writer
            output_fieldnames = ['Total Rows', 'Sum of BAL_DIFF']
            writer = csv.DictWriter(output_file, fieldnames=output_fieldnames)
            writer.writeheader()

            total_rows = 0
            total_balance_diff = 0
            
            for row in reader:
                total_rows += 1
                try:
                    balance_diff = float(row["BAL_DIFF"])
                    total_balance_diff += balance_diff
                except ValueError:
                    print(f"Error parsing 'BAL_DIFF' in row {total_rows}: {row['BAL_DIFF']}. Skipping this row.")
                    
            # Write results to the output CSV file
            writer.writerow({'Total Rows': total_rows, 'Sum of BAL_DIFF': total_balance_diff})
            print(f"Results written to {output_csv_file}")
            
    except FileNotFoundError:
        print(f"The file {input_csv_file} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
input_csv_file = 'your_input_file.csv'    # Replace with your input CSV file path
output_csv_file = 'output_summary.csv'     # Replace with desired output CSV file path

sum_and_count_rows(input_csv_file, output_csv_file)


---------------------------------------------------------------

import csv

import pandas as pd

# Example DataFrame
data = {
    'Name': ['John', 'Jane', 'Bob'],
    'Age': [25, 30, 22],
    'City': ['New York', 'San Francisco', 'Los Angeles']
}

df = pd.DataFrame(data)

# Specify the filename
csv_filename = 'output.csv'

# Write the DataFrame to a CSV file
df.to_csv(csv_filename, index=False)

print(f'CSV file "{csv_filename}" created successfully.')

-------------------------------------------------------------------------

import csv

def sum_by_currency(input_csv_file, output_csv_file):
    try:
        with open(input_csv_file, 'r', newline='') as input_file, \
             open(output_csv_file, 'w', newline='') as output_file:
            reader = csv.DictReader(input_file)
            
            # Check if 'BAL_DIFF' and 'CCY_CDE' columns exist
            header = reader.fieldnames
            if "BAL_DIFF" not in header or "CCY_CDE" not in header:
                print("Error: 'BAL_DIFF' or 'CCY_CDE' columns not found in the CSV.")
                return
            
            # Prepare output CSV writer
            output_fieldnames = ['CCY_CDE', 'Sum of BAL_DIFF']
            writer = csv.DictWriter(output_file, fieldnames=output_fieldnames)
            writer.writeheader()

            sums_by_currency = {}
            
            for row in reader:
                try:
                    balance_diff = float(row["BAL_DIFF"])
                    currency_code = row["CCY_CDE"]
                    
                    if currency_code not in sums_by_currency:
                        sums_by_currency[currency_code] = 0
                        
                    sums_by_currency[currency_code] += balance_diff
                    
                except ValueError:
                    print(f"Error parsing 'BAL_DIFF' in row {reader.line_num}: {row['BAL_DIFF']}. Skipping this row.")
            
            # Write results to the output CSV file
            for currency_code, balance_diff_sum in sums_by_currency.items():
                writer.writerow({'CCY_CDE': currency_code, 'Sum of BAL_DIFF': balance_diff_sum})
                
            print(f"Results written to {output_csv_file}")
            
    except FileNotFoundError:
        print(f"The file {input_csv_file} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
input_csv_file = 'your_input_file.csv'    # Replace with your input CSV file path
output_csv_file = 'output_summary_by_currency.csv'  # Replace with desired output CSV file path

sum_by_currency(input_csv_file, output_csv_file)


------------------------------------------------------------------------

import csv

def sum_and_count_by_currency(input_csv_file, output_csv_file):
    try:
        with open(input_csv_file, 'r', newline='') as input_file, \
             open(output_csv_file, 'w', newline='') as output_file:
            reader = csv.DictReader(input_file)
            
            # Check if 'CCY_CDE' column exists
            header = reader.fieldnames
            if "CCY_CDE" not in header:
                print("Error: 'CCY_CDE' column not found in the CSV.")
                return
            
            # Prepare output CSV writer
            output_fieldnames = ['CCY_CDE', 'Count', 'Sum of BAL_DIFF']
            writer = csv.DictWriter(output_file, fieldnames=output_fieldnames)
            writer.writeheader()

            counts_by_currency = {}
            sums_by_currency = {}
            
            for row in reader:
                try:
                    balance_diff = float(row.get("BAL_DIFF", 0))  # Default to 0 if BAL_DIFF is not present or cannot be converted to float
                    currency_code = row["CCY_CDE"]
                    
                    # Update count
                    counts_by_currency[currency_code] = counts_by_currency.get(currency_code, 0) + 1
                    
                    # Update sum
                    sums_by_currency[currency_code] = sums_by_currency.get(currency_code, 0) + balance_diff
                    
                except ValueError:
                    print(f"Error parsing 'BAL_DIFF' in row {reader.line_num}: {row.get('BAL_DIFF', 'N/A')}. Skipping this row.")
            
            # Write results to the output CSV file
            for currency_code, count in counts_by_currency.items():
                writer.writerow({'CCY_CDE': currency_code, 'Count': count, 'Sum of BAL_DIFF': sums_by_currency.get(currency_code, 0)})
                
            print(f"Results written to {output_csv_file}")
            
    except FileNotFoundError:
        print(f"The file {input_csv_file} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
input_csv_file = 'your_input_file.csv'    # Replace with your input CSV file path
output_csv_file = 'output_summary_by_currency.csv'  # Replace with desired output CSV file path

sum_and_count_by_currency(input_csv_file, output_csv_file)





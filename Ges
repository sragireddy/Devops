import sqlite3
from datetime import datetime

def check_sql_output(db_path, sql_query):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Execute the SQL query
        cursor.execute(sql_query)
        result = cursor.fetchone()
        
        # Get the current time
        current_time = datetime.now()
        
        if result is None or len(result) == 0:
            # No output from the SQL query
            if current_time.hour >= 14:  # Check if it's after 2 PM
                return "breach"
            else:
                return "waiting"
        else:
            # Check the value of the output
            output = result[0]
            if output == 1:
                if current_time.hour >= 14:  # Check if it's after 2 PM
                    return "breach"
                else:
                    return "green"
            else:
                # Handle unexpected output
                return "unexpected output"
    finally:
        # Close the database connection
        conn.close()

# Example usage
db_path = 'path_to_your_database.db'
sql_query = 'SELECT your_column FROM your_table LIMIT 1;'  # Replace with your actual SQL query

result = check_sql_output(db_path, sql_query)
print(result)


----



from datetime import datetime

def check_output(output):
    # Get the current time
    current_time = datetime.now()

    if output is None or output == 0:
        # No output or output is 0
        if current_time.hour >= 14:  # Check if it's after 2 PM
            return "breach"
        else:
            return "waiting"
    elif output == 1:
        if current_time.hour >= 14:  # Check if it's after 2 PM
            return "breach"
        else:
            return "green





"
    else:
        # Handle unexpected output
        return "unexpected output"

# Example usage
output_value = None  # Replace with the actual output value
result = check_output(output_value)
print(result)
----------


import sqlite3  # or use the appropriate database connector for your database (e.g., psycopg2 for PostgreSQL)
from datetime import datetime

# Define your database connection and query details
DATABASE = 'your_database.db'
QUERY = 'SELECT * FROM your_table WHERE column_name = ?'

# Define your inputs
inputs = ['input1', 'input2', 'input3', 'input4', 'input5']

# Define the corresponding time conditions for each input
time_conditions = [
    datetime.now().replace(hour=14, minute=0, second=0, microsecond=0),  # Condition for input1
    datetime.now().replace(hour=13, minute=0, second=0, microsecond=0),  # Condition for input2
    datetime.now().replace(hour=15, minute=0, second=0, microsecond=0),  # Condition for input3
    datetime.now().replace(hour=12, minute=0, second=0, microsecond=0),  # Condition for input4
    datetime.now().replace(hour=16, minute=0, second=0, microsecond=0)   # Condition for input5
]

# Function to execute the query
def execute_query(input_value):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute(QUERY, (input_value,))
    result = cursor.fetchall()
    conn.close()
    return result

# Iterate over each input and check the result
for input_value, time_condition in zip(inputs, time_conditions):
    current_time = datetime.now()
    result = execute_query(input_value)
    
    if not result:
        if current_time < time_condition:
            print(f"For input '{input_value}': waiting")
        else:
            print(f"For input '{input_value}': breach")
    else:
        if len(result) == 2 and current_time < time_condition:
            print(f"For input '{input_value}': good")
        else:
            print(f"For input '{input_value}': not good")




--------


import csv
from datetime import datetime

# Define the corresponding time conditions for each input
time_conditions = [
    datetime.now().replace(hour=14, minute=0, second=0, microsecond=0),  # Condition for input1
    datetime.now().replace(hour=13, minute=0, second=0, microsecond=0),  # Condition for input2
    datetime.now().replace(hour=15, minute=0, second=0, microsecond=0),  # Condition for input3
    datetime.now().replace(hour=12, minute=0, second=0, microsecond=0),  # Condition for input4
    datetime.now().replace(hour=16, minute=0, second=0, microsecond=0)   # Condition for input5
]

# Function to simulate getting a result for each input
def get_result(input_value):
    # Placeholder for actual result logic; this should return an empty list or a list with results
    # Here, we return an empty list for demonstration purposes
    if input_value == 'input1':
        return []  # Simulate no results
    elif input_value == 'input2':
        return [1, 2]  # Simulate results
    elif input_value == 'input3':
        return []  # Simulate no results
    elif input_value == 'input4':
        return [1]  # Simulate not good results
    elif input_value == 'input5':
        return [1, 2]  # Simulate good results

# Specify the CSV file
csv_file = 'your_file.csv'

# Read the input values from the CSV file
with open(csv_file, mode='r') as file:
    reader = csv.reader(file)
    rows = list(reader)

# Iterate over each row and check the result
for i, row in enumerate(rows):
    if i == 0:  # Skip the header row
        continue

    input_value = row[0]  # Assuming the input value is in the first column
    current_time = datetime.now()
    result = get_result(input_value)
    
    # Determine the result based on the conditions
    time_condition = time_conditions[i - 1]  # Adjust for zero-based index
    if not result:
        if current_time < time_condition:
            row[4] = 'waiting'
        else:
            row[4] = 'breach'
    else:
        if len(result) == 2 and current_time < time_condition:
            row[4] = 'good'
        else:
            row[4] = 'not good'

# Write the results back to the CSV file
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(rows)

print(f"Results have been written to the fifth column of {csv_file}")

-------


import sqlite3  # Use the appropriate database connector for your database (e.g., psycopg2 for PostgreSQL)
import csv
from datetime import datetime

# Define your database connection and query details
DATABASE = 'your_database.db'
QUERY = 'SELECT * FROM your_table WHERE column_name = ?'

# Define the corresponding time conditions for each input
time_conditions = [
    datetime.now().replace(hour=14, minute=0, second=0, microsecond=0),  # Condition for input1
    datetime.now().replace(hour=13, minute=0, second=0, microsecond=0),  # Condition for input2
    datetime.now().replace(hour=15, minute=0, second=0, microsecond=0),  # Condition for input3
    datetime.now().replace(hour=12, minute=0, second=0, microsecond=0),  # Condition for input4
    datetime.now().replace(hour=16, minute=0, second=0, microsecond=0)   # Condition for input5
]

# Function to execute the query and get results from the database
def execute_query(input_value):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute(QUERY, (input_value,))
    result = cursor.fetchall()
    conn.close()
    return result

# Specify the CSV file
csv_file = 'your_file.csv'

# Read the input values from the CSV file
with open(csv_file, mode='r') as file:
    reader = csv.reader(file)
    rows = list(reader)

# Iterate over each row and check the result
for i, row in enumerate(rows):
    if i == 0:  # Skip the header row
        row.append('Result')  # Add a header for the results column
        continue

    input_value = row[0]  # Assuming the input value is in the first column
    current_time = datetime.now()
    result = execute_query(input_value)
    
    # Determine the result based on the conditions
    time_condition = time_conditions[i - 1]  # Adjust for zero-based index
    if not result:
        if current_time < time_condition:
            row.append('waiting')
        else:
            row.append('breach')
    else:
        if len(result) == 2 and current_time < time_condition:
            row.append('good')
        else:
            row.append('not good')

# Write the results back to the CSV file
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(rows)

print(f"Results have been written to the fifth column of {csv_file}")


-////////

import sqlite3  # or use the appropriate database connector for your database (e.g., psycopg2 for PostgreSQL)
from datetime import datetime
import csv

# Define your database connection and query details
DATABASE = 'your_database.db'
QUERY = 'SELECT * FROM your_table WHERE column_name = ?'

# Define the corresponding time conditions for each input
time_conditions = [
    datetime.now().replace(hour=14, minute=0, second=0, microsecond=0),  # Condition for input1
    datetime.now().replace(hour=13, minute=0, second=0, microsecond=0),  # Condition for input2
    datetime.now().replace(hour=15, minute=0, second=0, microsecond=0),  # Condition for input3
    datetime.now().replace(hour=12, minute=0, second=0, microsecond=0),  # Condition for input4
    datetime.now().replace(hour=16, minute=0, second=0, microsecond=0)   # Condition for input5
]

# Function to execute the query
def execute_query(input_value):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute(QUERY, (input_value,))
    result = cursor.fetchall()
    conn.close()
    return result

# Specify the CSV file
csv_file = 'your_file.csv'

# Read the input values from the CSV file
with open(csv_file, mode='r') as file:
    reader = csv.reader(file)
    rows = list(reader)

# Check if the CSV has at least one row and the header row
if len(rows) < 2:
    print("The CSV file does not have enough rows.")
    exit()

# Check if there are enough time conditions for the inputs
if len(rows) - 1 > len(time_conditions):
    print("The number of time conditions does not match the number of inputs.")
    exit()

# Iterate over each row and check the result
for i, row in enumerate(rows):
    if i == 0:  # Skip the header row
        if len(row) < 5:
            row.append('Result')  # Add a header for the results column if it doesn't exist
        continue

    input_value = row[0]  # Assuming the input value is in the first column
    current_time = datetime.now()
    result = execute_query(input_value)
    
    # Determine the result based on the conditions
    time_condition = time_conditions[i - 1]  # Adjust for zero-based index
    if not result:
        if current_time < time_condition:
            if len(row) < 5:
                row.append('waiting')
            else:
                row[4] = 'waiting'
        else:
            if len(row) < 5:
                row.append('breach')
            else:
                row[4] = 'breach'
    else:
        if len(result) == 2 and current_time < time_condition:
            if len(row) < 5:
                row.append('good')
            else:
                row[4] = 'good'
        else:
            if len(row) < 5:
                row.append('not good')
            else:
                row[4] = 'not good'

# Write the results back to the CSV file
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(rows)

print(f"Results have been written to the fifth column of {csv_file}")

